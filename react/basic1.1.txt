 Commonly Asked React Interview Questions (Divided into Levels)

𝗕𝗮𝘀𝗶𝗰 𝗟𝗲𝘃𝗲𝗹 𝗤𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀:

1. What is React and how does it work?
2. What are the differences between functional and class components?
3. What are props and state? How are they different?
4. What is JSX, and why is it used in React?
5. How do you create a simple React component?
6. What is the Virtual DOM, and why is it important?
7. What is the purpose of the key prop in React lists?
8. How do you handle events in React?
9. What are default props in React?
10. What is conditional rendering in React?

𝗠𝗼𝗱𝗲𝗿𝗮𝘁𝗲 𝗟𝗲𝘃𝗲𝗹 𝗤𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀:

11. What are React Hooks? Can you explain useState and useEffect with examples?
12. What is the difference between controlled and uncontrolled components?
13. What is React Router, and how does client-side routing work?
14. What is the Context API, and when should you use it instead of Redux?
15. What is prop drilling, and how can it be avoided?
16. What is React.memo, and how does it help with performance optimization?
17. What is the difference between useMemo and useCallback?
18. What is a Higher-Order Component (HOC), and how is it used?
19. How does React handle forms, and what are controlled inputs?

𝗔𝗱𝘃𝗮𝗻𝗰𝗲𝗱 𝗟𝗲𝘃𝗲𝗹 𝗤𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀:

20. How does React handle re-renders, and how can you optimize unnecessary renders?
21. What is reconciliation in React?
22. How does React’s diffing algorithm work?
23. What is React.lazy and Suspense? How does lazy loading work in React?
24. What are error boundaries, and how do they work?
25. How do you handle authentication and protected routes in React?
26. What are render props, and how are they different from HOCs?
27. How does server-side rendering (SSR) differ from client-side rendering (CSR) in React?
28. What are React Fiber and Concurrent Mode?
29. How do you test React components? What are the commonly used testing libraries?



#2

Technical Questions:
1. 🔄 What is the JavaScript engine?
2. 🛠️ Tools and techniques for debugging React applications?
3. 🔒 Best practices for addressing security issues in JavaScript?
4. 🛡️ How to identify and mitigate vulnerability issues in React?
5. 🌐 What is hydration in server-side rendering?
6. ⚛️ How does React render components based on state or props changes?
7. 🖥️ Explain the process behind the virtual DOM and its performance optimization.
8. 🖱️ How does event handling work in React?
9. 📜 Explain how JavaScript Promises work, including the differences between 10. synchronous and asynchronous execution. What are thenables, and how do they relate to Promises?
11. ⚖️ Key differences between Promises and async/await? Provide examples of when you would prefer one approach over the other.
12. 🚫 How do you handle error management in async functions, and what are the best practices for using try/catch with Promises and async/await?

HTML Questions:
1. 📄 What are the benefits of using semantic HTML5 elements, and how does semantic markup impact accessibility and SEO?
2. 🏷️ How can you utilize custom data attributes in HTML to enhance JavaScript functionality? Can you provide an example of how to set and access these attributes in JavaScript?
3. 🔖 Why is it important to use the <label> element in forms, and how does it improve accessibility?

CSS Questions:
1. 🎨 How can you center a flex container both vertically and horizontally using CSS Flexbox?
2. 📏 Describe how to create a responsive grid layout that automatically adjusts the number of columns based on the screen size.
3. 🔍 What are the differences between child, descendant, and sibling selectors in CSS? Provide examples for each.
4. 📚 How to use CSS mixins, and what is the principle behind them?

Problem Solving & React Coding:
1. Letter count of a string.
2. Count the number of vowels.
3. Remove duplicates from an array.
React:
1. Create a colorful progress bar
2. Create a timer for 5 mins 
